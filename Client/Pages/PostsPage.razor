@page "/posts"
@using Client.Services
@using CryptoShoto.DTO;
@using DAL.Models
@inject PostService postService;
@inject NavigationManager NavigationManager;
@inject AuthenticationStateProvider AuthenticationStateProvider;

<PageTitle>Posts</PageTitle>

<AuthorizeView>
    <Authorized>
        <div class="form-group">
            <label for="Text">Text:</label>
            <input type="text" id="Text" class="form-control" @bind="@post.Text" />
        </div>

        <div class="form-group">
            <label for="Photo">Photo:</label>
            <input type="text" id="Photo" class="form-control" @bind="@post.Photo" />
        </div>

        <button class="btn btn-primary" @onclick="@CreatePost">Create</button>

        <br>
        <br>
        <br>
        <br>

        <button class="btn btn-primary" @onclick="@ShowPosts">Show</button>
        <ul>
            @if (posts != null && posts.Any())
            {
                @foreach (var item in posts)
                {
                    <li>@item.Text</li>
                    <button @onclick="() => DeletePost(item.Id)">Delete</button>
                }
            }
            else
            {
                <li>No posts found.</li>
            }
        </ul>
    </Authorized>
</AuthorizeView>

@code {
    private AuthenticationState _authenticationState;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (!authState.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    private PostDTO post = new PostDTO();
    private int id;

    private List<Post> posts;

    private async Task CreatePost()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        post.UserId = int.Parse(authState.User.FindFirst("UID").Value);
        await postService.AddPost(post);
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

    private async Task DeletePost()
    {
        await postService.DeletePost(id);
    }

    private async Task ShowPosts()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        posts = await postService.GetAllPostsByUser(int.Parse(authState.User.FindFirst("UID").Value));
    }

    public void DeletePost(int newsId)
    {
        postService.DeletePost(newsId);
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }
}